package com.droi.account.netutil;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.InetAddress;import java.net.Socket;import java.net.URL;import java.util.Map;import com.droi.account.DebugUtils;public class SocketHttpRequester {	private static final String TAG = "SocketHttpRequester";	public static String postExternalFile(String urlStr, Map<String, String> params, FormFile[] files) throws Exception{		final String BOUNDARY = "---------------------------7da2137580612";		final String endline = "--" + BOUNDARY + "--\r\n";		int fileDataLength = 0;		//待上传的图片信息		for (FormFile uploadFile : files){			if(uploadFile == null){				continue;			}			StringBuilder fileExplain = new StringBuilder();			fileExplain.append("--");			fileExplain.append(BOUNDARY);			fileExplain.append("\r\n");			fileExplain.append("Content-Disposition: form-data;name=\"" + uploadFile.getParameterName() + "\";filename=\"" + uploadFile.getFilname() + "\"\r\n");			fileExplain.append("Content-Type: " + uploadFile.getContentType() + "\r\n\r\n");			fileExplain.append("\r\n");			fileDataLength += fileExplain.length();			if (uploadFile.getInStream() != null){				fileDataLength += uploadFile.getFile().length();			}else{				fileDataLength += uploadFile.getData().length;			}		}		//待上传的字段信息		StringBuilder textEntity = new StringBuilder();		for (Map.Entry<String, String> entry : params.entrySet()){			textEntity.append("--");			textEntity.append(BOUNDARY);			textEntity.append("\r\n");			textEntity.append("Content-Disposition: form-data; name=\"" + entry.getKey() + "\"\r\n\r\n");			textEntity.append(entry.getValue());			textEntity.append("\r\n");			if(DebugUtils.DEBUG){				DebugUtils.i(TAG, "textEntity key:" + entry.getKey() + ", value : " + entry.getValue());			}		}		//上传总的数据长度, 字段信息和图片信息及附加信息		int dataLength = textEntity.toString().getBytes().length + fileDataLength + endline.getBytes().length;		URL url = new URL(urlStr);		int port = url.getPort() == -1 ? 80 : url.getPort();		Socket socket = new Socket(InetAddress.getByName(url.getHost()), port);		OutputStream outStream = socket.getOutputStream();				String requestmethod = "POST " + url.getPath() + " HTTP/1.1\r\n";		outStream.write(requestmethod.getBytes());		String accept = "Accept: image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*\r\n";		outStream.write(accept.getBytes());		String language = "Accept-Language: zh-CN\r\n";		outStream.write(language.getBytes());		String contenttype = "Content-Type: multipart/form-data; boundary=" + BOUNDARY + "\r\n";		outStream.write(contenttype.getBytes());		String contentlength = "Content-Length: " + dataLength + "\r\n";		outStream.write(contentlength.getBytes());		String alive = "Connection: Keep-Alive\r\n";		outStream.write(alive.getBytes());		String host = "Host: " + url.getHost() + ":" + port + "\r\n";		outStream.write(host.getBytes());				outStream.write("\r\n".getBytes());		//上传字段信息到outStream中		outStream.write(textEntity.toString().getBytes());				StringBuffer strBuf = new StringBuffer();				for (FormFile uploadFile : files){			if(uploadFile == null){				continue;			}			StringBuilder fileEntity = new StringBuilder();			fileEntity.append("--");			fileEntity.append(BOUNDARY);			fileEntity.append("\r\n");			fileEntity.append("Content-Disposition: form-data;name=\"" + uploadFile.getParameterName() + "\";filename=\"" + uploadFile.getFilname() + "\"\r\n");			fileEntity.append("Content-Type: " + uploadFile.getContentType() + "\r\n\r\n");			//图片格式			outStream.write(fileEntity.toString().getBytes());			if (uploadFile.getInStream() != null){				byte[] buffer = new byte[1024];				int len = 0;				while ((len = uploadFile.getInStream().read(buffer, 0, 1024)) != -1){					//上传图片信息到outStream中					if(DebugUtils.DEBUG){						DebugUtils.w(TAG, "upload file length : "+len);					}					outStream.write(buffer, 0, len);				}				uploadFile.getInStream().close();			}else{				outStream.write(uploadFile.getData(), 0, uploadFile.getData().length);			}			outStream.write("\r\n".getBytes());		}				outStream.write(endline.getBytes());		outStream.flush();//flush after write		//		BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));		if ( null != reader && reader.readLine().indexOf("200") == -1){			if(DebugUtils.DEBUG){				DebugUtils.i("postExternalFile():", "200:" + -1);			}			return null;		}else{			String readStr;			String contLenLable = "Content-Length: ";			int contLength = 0;			boolean readBody = false;			while (null != reader && ((readStr = reader.readLine()) != null)){				if(DebugUtils.DEBUG){					DebugUtils.i("postExternalFile:", "responce read line:" + readStr);				}				if(readStr.startsWith(contLenLable)){					String lenStr = readStr.substring(contLenLable.length());					contLength = Integer.parseInt(lenStr);				}				if(readStr.equals("")){					if(DebugUtils.DEBUG){						DebugUtils.i("postExternalFile:", "responce read empty line, body start");					}					readBody = true;				}				if(DebugUtils.DEBUG){					DebugUtils.i("strLength:", readStr.getBytes().length + ", server return : " + contLength);				}				if(contLength != 0 && readBody && readStr.getBytes().length == contLength){					if(DebugUtils.DEBUG){						DebugUtils.i("postExternalFile:", "find responce content, content length=" + contLength + ", content:" + readStr);					}					strBuf.append(readStr);					//since we get all what serve send to us based on the contLength					break;				}			}		}		//outStream.flush();		outStream.close();		reader.close();		socket.close();		if(DebugUtils.DEBUG){			DebugUtils.i("resultBuf :", strBuf.toString());		}		return strBuf.toString();	}		public static String postExternalFile(String url, Map<String, String> params, FormFile file) throws Exception	{		return postExternalFile(url, params, new FormFile[] { file });	}	}