package com.droi.account.login;

import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.os.AsyncTask;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import com.droi.account.Utils;
import com.droi.account.authenticator.Constants;
import com.droi.account.netutil.HttpOperation;
import com.droi.account.netutil.MD5Util;

public class DeleteAccountActivity extends BaseActivity {

	private EditText mUserName;
	private EditText mPassword;
	
	private Button mLogin;
	private Button mDelete;
	private String mOpenID;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		setContentView(mMyResources.getLayout("lib_droi_account_delete_layout"));
		mUserName = (EditText)findViewById(mMyResources.getId("lib_droi_account_username"));
		mPassword = (EditText)findViewById(mMyResources.getId("lib_droi_account_pasword"));
		mLogin = (Button) findViewById(mMyResources.getId("lib_droi_account_account_login"));
		mDelete = (Button) findViewById(mMyResources.getId("lib_droi_account_delete_account"));
		setupViews();
	}
	
	private void setupViews(){
		mLogin.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showProgressbar("on Process");
				String userName = mUserName.getText().toString().trim();
				String password = mPassword.getText().toString().trim();
				new UserLoginTask(userName, password).execute();
			}
			
		});
		
		mDelete.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showProgressbar("on Process");
				new DeleteTask(mOpenID).execute();
			}
			
		});
	}

	public void onBack(View view){
		onBackPressed();
	}
	
	
	 public class UserLoginTask extends AsyncTask<Void, Void, String>{

		 private String mUserName;
		 private String mPassword;
		 
		 public UserLoginTask(String username, String password){
			 mUserName = username;
			 mPassword = password;
			 
		 }
		 
		@Override
		protected String doInBackground(Void... params) {
			// TODO Autogenerated method stub
			String passwdMD5 = MD5Util.md5(mPassword);
			final Map<String, String> loginParams = new HashMap<String, String>();
			loginParams.put(Constants.JSON_S_UID, mUserName);
			loginParams.put(Constants.JSON_S_PWD, passwdMD5);
			loginParams.put("utype", "zhuoyou");
			loginParams.put("devinfo", " ");
			loginParams.put("sign", MD5Util.md5(mUserName+passwdMD5+"zhuoyou"+" "+""+Constants.SIGNKEY));
			
			String loginResult = null;
			try{
				loginResult = HttpOperation.postRequest(Constants.ACCOUNT_LOGIN, loginParams);
			}catch(Exception e){
				e.printStackTrace();
			}
			
			return loginResult;
		}
		
        @Override
        protected void onPostExecute(String result){
        	super.onPostExecute(result);
        	dismissProgressbar();
        	if (!TextUtils.isEmpty(result)){
        		try {
					JSONObject jsonObject = new JSONObject(result);
					int rs = jsonObject.getInt("result");
					if(rs == 0){
						String token = jsonObject.getString("token");
						mOpenID = jsonObject.getString("openid");
						Utils.showMessage(DeleteAccountActivity.this, "Login Success");
					}else{
                    	String desc = jsonObject.has("desc") ? jsonObject.getString("desc") : "Login Fail";
                    	Utils.showMessage(DeleteAccountActivity.this, desc);
					}
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}else{
        		Utils.showMessage(DeleteAccountActivity.this, "Login Fail empty");
        	}
        }
        
        @Override
        protected void onCancelled(){
        	
        }
		 
	 }
	 
	 
	 public class DeleteTask extends AsyncTask<Void, Void, String>{

		 private String mOpenId;
		 
		 public DeleteTask(String openId){
			 mOpenId = openId;
		 }
		 
		@Override
		protected String doInBackground(Void... params) {
			// TODO Autogenerated method stub
			final Map<String, String> loginParams = new HashMap<String, String>();
			loginParams.put("openid", mOpenId);
			loginParams.put("sign", MD5Util.md5(mOpenId+Constants.SIGNKEY));
			
			String loginResult = null;
			try{
				loginResult = HttpOperation.postRequest(Constants.ACCOUNT_DELETE, loginParams);
			}catch(Exception e){
				e.printStackTrace();
			}
			
			return loginResult;
		}
		
        @Override
        protected void onPostExecute(String result){
        	super.onPostExecute(result);
        	dismissProgressbar();
        	if (!TextUtils.isEmpty(result)){
        		try {
					JSONObject jsonObject = new JSONObject(result);
					int rs = jsonObject.getInt("result");
					if(rs == 0){
						String token = jsonObject.getString("token");
						Utils.showMessage(DeleteAccountActivity.this, "Delete Success");
						setResult(RESULT_OK);
						finish();
					}else{
                    	String desc = jsonObject.has("desc") ? jsonObject.getString("desc") : "Delete Fail";
                    	Utils.showMessage(DeleteAccountActivity.this, desc);
					}
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}else{
        		Utils.showMessage(DeleteAccountActivity.this, "Delete Fail empty");
        	}
        }
        
        @Override
        protected void onCancelled(){
        	
        }
		 
	 }
	
	
}
